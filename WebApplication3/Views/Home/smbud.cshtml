@{
    ViewBag.Title = "Sample Budget";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sample Budget</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="~/Content/site.css">
    <script>
        async function generateBudget() {
            const resources = [];
            document.querySelectorAll('tbody tr').forEach(row => {
                const name = row.querySelector('.editable-cell').innerText;
                const cost = parseFloat(row.querySelector('.cost').value) || 0;
                const numberOfResources = parseFloat(row.querySelector('.number-of-resources').value) || 0;
                resources.push({ name, cost, numberOfResources });
            });

            const projectStartDate = localStorage.getItem('projectStartDate');
            const projectEndDate = localStorage.getItem('projectEndDate');

            const additionalCosts = [];
            document.querySelectorAll('#optionalBudget tbody tr').forEach(row => {
                const name = row.querySelector('.editable-cell').innerText;
                const cost = parseFloat(row.querySelector('.cost').value) || 0;
                const numberOfResources = parseFloat(row.querySelector('.number-of-resources').value) || 0;
                additionalCosts.push({ name, cost, numberOfResources });
            });

            const response = await fetch('/Home/GenerateFiles', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    resources,
                    projectStartDate,
                    projectEndDate,
                    additionalCosts
                })
            });

            if (response.ok) {
                const data = await response.json();
                console.log('Files generated:', data);
                // Provide download links for the generated files
                document.getElementById('downloadLinks').innerHTML = `
                        <a href="${data.excelFilePath}" download>Download Excel</a>
                    `;
            } else {
                console.error('Error generating files:', response.statusText);
            }
        }
    </script>
    <script>
        function toggleOptionalBudget() {
            var optionalBudget = document.getElementById('optionalBudget');
            if (optionalBudget.style.display === 'none') {
                optionalBudget.style.display = 'block';
            } else {
                optionalBudget.style.display = 'none';
            }
        }

        function calculateTotal(row) {
            var cost = parseFloat(row.querySelector('.cost').value) || 0;
            var numberOfResources = parseFloat(row.querySelector('.number-of-resources').value) || 0;
            var total = cost * numberOfResources;
            row.querySelector('.total').innerText = total.toFixed(2);
            calculateTotalCostOfResources();
        }
        
        function calculateTotalCostOfResources() {
            var totalCost = 0;
            document.querySelectorAll('tbody tr').forEach(row => {
                var total = parseFloat(row.querySelector('.total').innerText) || 0;
                totalCost += total;
            });
            document.querySelector('tfoot .total-cell').innerText = totalCost.toFixed(2);
        }

        function setupRealTimeCalculation() {
            var editableInputs = document.querySelectorAll('.editable-input');
            editableInputs.forEach(function (input) {
                input.addEventListener('input', function () {
                    var row = input.closest('tr');
                    calculateTotal(row);
                });
            });
        }
        function populateResources() {
            var resources = JSON.parse(localStorage.getItem('resources')) || {};
            for (var key in resources) {
                if (resources.hasOwnProperty(key)) {
                    var input = document.querySelector(`input[name="${key}"]`);
                    if (input) {
                        input.value = resources[key].count;
                        var row = input.closest('tr');
                        calculateTotal(row);
                    }
                }
            }
            calculateTotalCostOfResources();
        }

       

        document.addEventListener('DOMContentLoaded', function () {
            populateResources();
            setupRealTimeCalculation();
        });
    </script>

    <script>
        function combinedData(){
            const projectName = localStorage.getItem('projectName');
            const projectType = localStorage.getItem('projectType');
            const projectComplexity = localStorage.getItem('projectComplexity');
            const Analysisandrequirementsignoff = localStorage.getItem('Analysisandrequirementsignoff');
            const FunctionalDesign = parseFloat(localStorage.getItem('FunctionalDesign')) || 0;
            const TechnicalDesign = parseFloat(localStorage.getItem('TechnicalDesign')) || 0;
       
            const AnalysisandDesign1 = parseFloat(localStorage.getItem('AnalysisandDesign1')) || 0;
            const Frontendchanges = parseFloat(localStorage.getItem('Frontendchanges')) || 0;
            const IntegrationChanges = parseFloat(localStorage.getItem('IntegrationChanges')) || 0;
            const BackendChanges = parseFloat(localStorage.getItem('BackendChanges')) || 0;
            const Coding = parseFloat(localStorage.getItem('Coding')) || 0;
            const UnitTestCasePreparation = parseFloat(localStorage.getItem('UnitTestCasePreparation')) || 0;
            const UnittestlogsandDefectFix = parseFloat(localStorage.getItem('UnittestlogsandDefectFix')) || 0;
            const CodeReview = parseFloat(localStorage.getItem('CodeReview')) || 0;
            const UnitTestCaseReview = parseFloat(localStorage.getItem('UnitTestCaseReview')) || 0;
            const UnittestResultReview = parseFloat(localStorage.getItem('UnittestResultReview')) || 0;
            const UnitTesting = parseFloat(localStorage.getItem('UnitTesting')) || 0;
            const QAandTestResultReview = parseFloat(localStorage.getItem('QAandTestResultReview')) || 0;
            const QAandUATSupport = parseFloat(localStorage.getItem('QAandUATSupport')) || 0;
            const QATestCasePreparation = parseFloat(localStorage.getItem('QATestCasePreparation')) || 0;
            const QATestingandDefectFix = parseFloat(localStorage.getItem('QATestingandDefectFix')) || 0;
            const IntegrationTesting = parseFloat(localStorage.getItem('IntegrationTesting')) || 0;
            const UATTestingandDefectFix = parseFloat(localStorage.getItem('UATTestingandDefectFix')) || 0;
            const QAandUATTesting = parseFloat(localStorage.getItem('QAandUATTesting')) || 0;
            const Releasemanagement = parseFloat(localStorage.getItem('Releasemanagement')) || 0;
            const DeploymentSupport = parseFloat(localStorage.getItem('DeploymentSupport')) || 0;
            const WarrantySupport = parseFloat(localStorage.getItem('WarrantySupport')) || 0;
            const Support = parseFloat(localStorage.getItem('Support')) || 0;
            console.log("Support :", Support);

            const resources = JSON.parse(localStorage.getItem('resources'));
            const rolevariables={};
            for (const [role, data] of Object.entries(resources)){
                rolevariables[role] = data.names;


                const nameList = document.createElement('ul');
                data.names.forEach(name => {
                    const listitem = document.createElement('li');
                    listitem.textContent = name;
                    nameList.appendChild(listitem);
                });
                
            }

            const analysisStartDate = new Date(localStorage.getItem('analysisStartDate'));
            const analysisEndDate = new Date(localStorage.getItem('analysisEndDate'));
            const DesignStartDate = new Date(localStorage.getItem('DesignStartDate'));
            const DesignEndDate = new Date(localStorage.getItem('DesignEndDate'));
            const DevStart = new Date(localStorage.getItem('DevStart'));
            const DevEnd = new Date(localStorage.getItem('DevEnd'));
            const testStart = new Date(localStorage.getItem('testStart'));
            const testEnd = new Date(localStorage.getItem('testEnd'));
            const UATStart = new Date(localStorage.getItem('UATStart'));
            const UATEnd = new Date(localStorage.getItem('UATEnd'));
            const PRODdates = new Date(localStorage.getItem('PRODdates'));
            const BCdates = new Date(localStorage.getItem('BCdates'));
             

        }
              document.addEventListener('DOMContentLoaded', function () {
            combinedData();
           
        });
    </script>

</head>
<body>
    <div class="container">
        <h2 class="header">Sample Budget Prepared</h2>
        <table>
            <thead>
                <tr>
                    <th>Resource</th>
                    <th>Cost Per Hour</th>
                    <th>Number of Resources</th>
                    <th>Total</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="editable-cell">Delivery Manager</td>
                    <td><input type="text" class="editable-input cost" value="200"></td>
                    <td><input type="text" class="editable-input number-of-resources" name="deliveryManager" value="1"></td>
                    <td class="total total-cell">200</td>
                </tr>
                <tr>
                    <td class="editable-cell">Senior Manager</td>
                    <td><input type="text" class="editable-input cost" value="150"></td>
                    <td><input type="text" class="editable-input number-of-resources" name="seniorManager" value="1"></td>
                    <td class="total total-cell">150</td>
                </tr>
                <tr>
                    <td class="editable-cell">Manager</td>
                    <td><input type="text" class="editable-input cost" value="100"></td>
                    <td><input type="text" class="editable-input number-of-resources" name="manager" value="1"></td>
                    <td class="total total-cell">100</td>
                </tr>
                <tr>
                    <td class="editable-cell">Project Lead</td>
                    <td><input type="text" class="editable-input cost" value="90"></td>
                    <td><input type="text" class="editable-input number-of-resources" name="projectLead" value="1"></td>
                    <td class="total total-cell">90</td>
                </tr>
                <tr>
                    <td class="editable-cell">Dev Team Lead</td>
                    <td><input type="text" class="editable-input cost" value="80"></td>
                    <td><input type="text" class="editable-input number-of-resources" name="devTeamLead" value="1"></td>
                    <td class="total total-cell">80</td>
                </tr>
                <tr>
                    <td class="editable-cell">Senior Developer</td>
                    <td><input type="text" class="editable-input cost" value="70"></td>
                    <td><input type="text" class="editable-input number-of-resources" name="seniorDeveloper" value="1"></td>
                    <td class="total total-cell">70</td>
                </tr>
                <tr>
                    <td class="editable-cell">Developer</td>
                    <td><input type="text" class="editable-input cost" value="50"></td>
                    <td><input type="text" class="editable-input number-of-resources" name="developer" value="5"></td>
                    <td class="total total-cell">250</td>
                </tr>
                <tr>
                    <td class="editable-cell">QA Team Lead</td>
                    <td><input type="text" class="editable-input cost" value="70"></td>
                    <td><input type="text" class="editable-input number-of-resources" name="qaTeamLead" value="1"></td>
                    <td class="total total-cell">70</td>
                </tr>
                <tr>
                    <td class="editable-cell">Senior Tester</td>
                    <td><input type="text" class="editable-input cost" value="70"></td>
                    <td><input type="text" class="editable-input number-of-resources" name="seniorTester" value="1"></td>
                    <td class="total total-cell">70</td>
                </tr>
                <tr>
                    <td class="editable-cell">Tester</td>
                    <td><input type="text" class="editable-input cost" value="50"></td>
                    <td><input type="text" class="editable-input number-of-resources" name="tester" value="2"></td>
                    <td class="total total-cell">100</td>
                </tr>
                <tr>
                    <td class="editable-cell">Deployment Team</td>
                    <td><input type="text" class="editable-input cost" value="50"></td>
                    <td><input type="text" class="editable-input number-of-resources" name="deploymentTeam" value="2"></td>
                    <td class="total total-cell">100</td>
                </tr>
            </tbody>
            <tfoot>
                <tr>
                    <td colspan="3">Total cost of Resources</td>
                    <td class="total-cell">1280</td>
                </tr>
            </tfoot>
        </table>
        <button class="btn-customize" onclick="window.location.href='@Url.Action("Resource", "Home")'">Customize Budget</button>
        <button class="btn-optional-budget" onclick="toggleOptionalBudget()">Show Optional Budget</button>


        <div id="optionalBudget" class="optional-budget">
            <h3>2. Hardware and Software Costs</h3>
            <table>
                <thead>
                    <tr>
                        <th>Name of the Software</th>
                        <th>Cost</th>
                        <th>Number of Resources</th>
                        <th>Total</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td class="editable-cell">Hardware Cost</td>
                        <td><input type="text" class="editable-input cost"></td>
                        <td><input type="text" class="editable-input number-of-resources"></td>
                        <td class="total total-cell"></td>
                    </tr>
                    <tr>
                        <td class="editable-cell">Software Cost</td>
                        <td><input type="text" class="editable-input cost"></td>
                        <td><input type="text" class="editable-input number-of-resources"></td>
                        <td class="total total-cell"></td>
                    </tr>
                </tbody>
            </table>

            <h3>3. Additional Costs</h3>
            <table>
                <thead>
                    <tr>
                        <th>Additional Resource</th>
                        <th>Cost</th>
                        <th>Number of Resources</th>
                        <th>Total</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td class="editable-cell">Travel for Meeting</td>
                        <td><input type="text" class="editable-input cost"></td>
                        <td><input type="text" class="editable-input number-of-resources"></td>
                        <td class="total total-cell"></td>
                    </tr>
                    <tr>
                        <td class="editable-cell">Telecommunication Cost</td>
                        <td><input type="text" class="editable-input cost"></td>
                        <td><input type="text" class="editable-input number-of-resources"></td>
                        <td class="total total-cell"></td>
                    </tr>
                    <tr>
                        <td class="editable-cell">Training</td>
                        <td><input type="text" class="editable-input cost"></td>
                        <td><input type="text" class="editable-input number-of-resources"></td>
                        <td class="total total-cell"></td>
                    </tr>
                    <tr>
                        <td class="editable-cell">Office Space, Rent</td>
                        <td><input type="text" class="editable-input cost"></td>
                        <td><input type="text" class="editable-input number-of-resources"></td>
                        <td class="total total-cell"></td>
                    </tr>
                </tbody>
            </table>

            <h3>4. Variable/Fixed Costs</h3>
            <table>
                <thead>
                    <tr>
                        <th>Variable/Fixed Cost</th>
                        <th>Cost</th>
                        <th>Number of Resources</th>
                        <th>Total</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td class="editable-cell">Project Implementation</td>
                        <td><input type="text" class="editable-input cost"></td>
                        <td><input type="text" class="editable-input number-of-resources"></td>
                        <td class="total total-cell"></td>
                    </tr>
                    <tr>
                        <td class="editable-cell">Production Support</td>
                        <td><input type="text" class="editable-input cost"></td>
                        <td><input type="text" class="editable-input number-of-resources"></td>
                        <td class="total total-cell"></td>
                    </tr>
                    <tr>
                        <td class="editable-cell">Contingency</td>
                        <td><input type="text" class="editable-input cost"></td>
                        <td><input type="text" class="editable-input number-of-resources"></td>
                        <td class="total total-cell"></td>
                    </tr>
                </tbody>
            </table>
            <button class="btn-customize" onclick="generateBudget()">Generate Budget</button>

        </div>
    </div>
</body>
</html>